{"version":3,"sources":["components/weather.js","components/WeatherCard.js","components/CitySelector.js","components/WeatherList.js","hooks/UseFetch.js","App.js","reportWebVitals.js","index.js"],"names":["weather","weatherData","WeatherIcon","styled","div","console","log","weatherIcon","main","icon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","className","Card","style","width","Img","variant","src","Body","Title","name","sys","country","Text","temp","temp_min","temp_max","humidity","coord","lat","lon","Date","sunrise","toLocaleTimeString","sunset","fontSize","marginTop","color","Button","onClick","window","location","reload","faSync","WeatherCard","dt","city","date","Header","toLocaleDateString","CitySelector","onSearch","useState","setCity","Row","Col","xl","FormControl","placeholder","onChange","event","target","value","WeatherList","weathers","list","map","UseFetch","initialUrl","dataF","setDataF","error","setError","isLoading","setIsLoading","url","setUrl","useEffect","fetch","then","response","json","cod","message","catch","App","setLat","long","setLong","data","setData","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","process","res","result","fetchData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e14ee036.chunk.js","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport styled from 'styled-components';\n\nimport {\n    faCloud,\n    faBolt,\n    faCloudRain,\n    faCloudShowersHeavy,\n    faSnowflake,\n    faSun,\n    faSmog,\n    faSync,\n  } from '@fortawesome/free-solid-svg-icons';\n\n\nexport default function weather({weatherData}) {\n    const WeatherIcon = styled.div`color: whitesmoke;`;\n    console.log(weatherData)\n    const refresh = () => {\n      window.location.reload();\n    }\n  \n    let weatherIcon = null;\n  \n    if (weatherData.weather[0].main === 'Thunderstorm') {\n      weatherIcon = <FontAwesomeIcon icon={faBolt} />;\n    } else if (weatherData.weather[0].main === 'Drizzle') {\n      weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\n    } else if (weatherData.weather[0].main === 'Rain') {\n      weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\n    } else if (weatherData.weather[0].main === 'Snow') {\n      weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\n    } else if (weatherData.weather[0].main === 'Clear') {\n      weatherIcon = <FontAwesomeIcon icon={faSun} />;\n    } else if (weatherData.weather[0].main === 'Clouds') {\n      weatherIcon = <FontAwesomeIcon icon={faCloud} />;\n    } else {\n      weatherIcon = <FontAwesomeIcon icon={faSmog} />;\n    }\n  \n    return (\n      <div className=\"main\">\n        <Card style={{ width: '18rem' }}>\n        <Card.Img variant=\"top\" src=\"\" />\n        <Card.Body>\n            <Card.Title>{weatherData.name} - {weatherData.sys.country}</Card.Title>\n            <Card.Text>\n            {/* actual temperature */}\n            <p className=\"temp\">Temperature: {weatherData.main.temp} &deg;C</p>\n            {/* minimum temperature */}\n            <p>Min: {weatherData.main.temp_min}</p>\n            {/* maximum temperature */}\n            <p>Max: {weatherData.main.temp_max}</p>\n            {/* humidity */}\n            <p className=\"temp\">Humidity: {weatherData.main.humidity} %</p> \n            {/* lat & lon */}\n            <p className=\"temp\">Lat: {weatherData.coord.lat} - Lon: {weatherData.coord.lon}</p>\n            {/* sunrise */}        \n            <p className=\"sunrise-sunset\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-US')}</p>\n            {/* sunset */}        \n            <p className=\"sunrise-sunset\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-US')}</p>      \n            <WeatherIcon style={{fontSize:30,marginTop:15, color:'black'}}>{weatherIcon}</WeatherIcon>\n            </Card.Text>\n            <Button variant=\"primary\" onClick={refresh}><FontAwesomeIcon icon={faSync}/></Button>\n        </Card.Body>\n        </Card>\n      \n    </div>\n    )\n  }","// components/WeatherCard.js\n\nimport React from 'react';\nimport {Card} from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport styled from 'styled-components';\n\nimport {\n    faCloud,\n    faBolt,\n    faCloudRain,\n    faCloudShowersHeavy,\n    faSnowflake,\n    faSun,\n    faSmog,\n    faSync,\n  } from '@fortawesome/free-solid-svg-icons';\n\nconst WeatherCard = ({dt, temp_min, temp_max, humidity, temp, main, city, country  }) => {\n  const WeatherIcon = styled.div`color: whitesmoke;`;\n\n  let weatherIcon = null;\n  \n  if (main === 'Thunderstorm') {\n    weatherIcon = <FontAwesomeIcon icon={faBolt} />;\n  } else if (main === 'Drizzle') {\n    weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\n  } else if (main === 'Rain') {\n    weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\n  } else if (main === 'Snow') {\n    weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\n  } else if (main === 'Clear') {\n    weatherIcon = <FontAwesomeIcon icon={faSun} />;\n  } else if (main === 'Clouds') {\n    weatherIcon = <FontAwesomeIcon icon={faCloud} />;\n  } else {\n    weatherIcon = <FontAwesomeIcon icon={faSmog} />;\n  }  \n\n\n  // create a date object with Date class constructor\n  const date = new Date(dt);\n  return (\n    <div className=\"main\">\n        <Card style={{width: '18rem'}}>\n        <Card.Header>\n            <WeatherIcon style={{fontSize:30,marginTop:15, color:'black'}}>{weatherIcon}</WeatherIcon>\n        </Card.Header>\n        <Card.Body>\n            <Card.Title>{city} - {country}</Card.Title>\n            {/*  datetime is received in milliseconds, let's turn into local date time */}\n            <p>\n            <b>{date.toLocaleDateString()} - {date.toLocaleTimeString()}</b>\n            </p>\n            {/* minimum temperature */}\n            <p>Min: {temp_min}</p>\n            {/* maximum temperature */}\n            <p>Max: {temp_max}</p>\n            {/* humidity */}\n            <p>Humidity: {humidity} %</p> \n            {/* temperature */}\n            <p>Temperature: {temp} &deg;C</p>\n        </Card.Body>\n        </Card>        \n    </div>  \n  );\n};\n\nexport default WeatherCard;","import React, {useState} from 'react';\nimport {Row, Col, FormControl, Button} from 'react-bootstrap';\nconst CitySelector = ({onSearch}) => {\n    const [city, setCity] = useState('');\n\n    return (\n      <>\n        <Row>\n          <Col>\n            <h1>Search a city</h1>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xl={5}>\n            <FormControl\n              placeholder=\"Enter city\"\n              onChange={(event) => setCity(event.target.value)}\n              value={city}\n            />\n          </Col>\n          <Col>\n            <Button onClick={() => onSearch(city)}>Check Weather</Button>\n          </Col>\n        </Row>\n      </>\n    );\n  };\n\nexport default CitySelector;","// components/WeatherList.js\n\nimport React from 'react'\nimport { Col, Row } from 'react-bootstrap'\nimport WeatherCard from './WeatherCard'\n\nconst WeatherList = ({weathers}) => {\n    console.log(\"e\")\n    console.log(weathers)\n\n    return (\n        <Row>\n           {weathers.list.map(({dt, main, weather}) => (\n                <Col col-sm key={dt}>\n                    <WeatherCard\n                    dt={dt * 1000} \n                    temp_min={main.temp_min} \n                    temp_max={main.temp_max} \n                    humidity={main.humidity}\n                    temp={main.temp}\n                    main={weather[0].main} \n                    city={weathers.city.name}\n                    country={weathers.city.country}\n                  />\n                </Col>\n            ))} \n        </Row>\n    )\n}\n\nexport default WeatherList;","// hooks/UseFetch.js\n\nimport {useState, useEffect} from 'react';\n\nconst UseFetch = (initialUrl) => {\n  // create state variables\n  const [dataF, setDataF] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n  const [url, setUrl] = useState(initialUrl);\n\n  useEffect(() => {\n    if(!url) return;\n    setIsLoading(true);\n    // clear old search\n    setDataF(null);\n    setError(null);\n\n    fetch(url)\n        .then((response) => response.json())\n        .then((dataF) => {\n\n            // error handling for nonexistent data\n            setIsLoading(false);\n            if(dataF.cod >= 400) {\n                setError(dataF.message);\n                return;\n            }\n            setDataF(dataF);\n        })\n        .catch((error) => {\n            setIsLoading(false);\n            setError(error);\n        });\n  }, [url]);\n\n  return { dataF, error, isLoading, setUrl };\n};\n\nexport default UseFetch;","import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Weather from './components/weather';\nimport WeatherCard from './components/WeatherCard';\nimport CitySelector from './components/CitySelector';\nimport WeatherList from './components/WeatherList';\nimport UseFetch from './hooks/UseFetch'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Forecast from './components/forecast';\n\nexport default function App() {\n  \n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]); \n  const {dataF, error, isLoading, setUrl} = UseFetch();\n\n  // error handling and loading\n  const getContent = () => {\n    if(error) return <h2>Error when fetching: {error}</h2>\n    if(!dataF && isLoading) return <h2>LOADING...</h2>\n    if(!dataF) return null;\n    return <WeatherList weathers={dataF} />\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      });\n\n      await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n      .then(res => res.json())\n      .then(result => {\n        setData(result)\n      });\n    }\n    fetchData();\n  },[lat,long])\n  \n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        {(typeof data.main != 'undefined') ? (\n          <Weather weatherData={data}/>\n        ): (\n          <div></div>\n        )}\n      </div>\n\n      <div className=\"container\">\n        <CitySelector onSearch={(city) => setUrl(`${process.env.REACT_APP_API_URL}/forecast?q=${city}&APPID=${process.env.REACT_APP_API_KEY}&units=metric`)} />\n        {}\n        {getContent()}\n      </div>\n          \n      \n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}